{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp\\\\www\\\\projecteFullStack\\\\part1\\\\part1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Note } from './Note';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App(props) {\n  _s();\n  const [notes, setNotes] = useState(props.notes);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    //una request \n    console.log(\"effect\");\n    setLoading(true);\n    // fetch(\"\")\n    //     .then(response => response.json())\n    //     .then((json) => {\n    //     setNotes(json)\n    // })      \n    axios.get(\"https://jsonplaceholder.typicode.com/todos\").then(response => {\n      const {\n        data\n      } = response;\n      setNotes(data);\n      setLoading(false);\n    });\n  }, []); //el array es de dependencias, si no se le pasa nada se ejecuta solo una vez y si le pasamos algo se ejecuta cada vez que cambie ese valor\n\n  const handleChange = event => {\n    setNewNote(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); // para evitar que se refresque la pagina\n    console.log(newNote);\n    const noteToAddToState = {\n      id: notes.length + 1,\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    };\n    //cada vez que queremos actualizar el estado queremos crear un array nuevo\n    setNotes(notes.concat(noteToAddToState));\n    setNewNote(\"\"); //para limpiar el input\n  };\n\n  const handleShowAll = () => {\n    setShowAll(() => !showAll);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowAll,\n      children: showAll ? \"Show only important\" : \"Show all\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: notes.filter(note => {\n        if (showAll === true) return true;\n        return note.important === true;\n      }).map(note => /*#__PURE__*/_jsxDEV(Note, {\n        ...note\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 18\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleChange,\n        value: newNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Crear nota\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"XNlU3e+Cd11j4afYVkBfkLEy80M=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Note","useEffect","useState","axios","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","loading","setLoading","console","log","get","then","response","data","handleChange","event","target","value","handleSubmit","preventDefault","noteToAddToState","id","length","content","date","Date","toISOString","important","Math","random","concat","handleShowAll","filter","note","map"],"sources":["C:/wamp/www/projecteFullStack/part1/part1/src/App.js"],"sourcesContent":["import {Note} from './Note'\nimport {useEffect, useState} from 'react'\nimport axios from 'axios'\n\nexport default function App(props) {\n    \n    const [notes, setNotes] = useState(props.notes)\n    const [newNote, setNewNote] = useState(\"\")\n    const [showAll, setShowAll] = useState(true)\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => { //una request \n        console.log(\"effect\")\n        setLoading(true)\n            // fetch(\"\")\n            //     .then(response => response.json())\n            //     .then((json) => {\n            //     setNotes(json)\n            // })      \n        axios.get(\"https://jsonplaceholder.typicode.com/todos\")\n        .then((response) => {\n            const {data} = response\n            setNotes(data)\n            setLoading(false)\n        })\n    }, [])//el array es de dependencias, si no se le pasa nada se ejecuta solo una vez y si le pasamos algo se ejecuta cada vez que cambie ese valor\n\n    const handleChange = (event) =>{\n        setNewNote(event.target.value)\n    }\n\n    const handleSubmit = (event) =>{\n        event.preventDefault() // para evitar que se refresque la pagina\n        console.log(newNote)\n        const noteToAddToState = {\n            id: notes.length + 1,\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5\n        }\n        //cada vez que queremos actualizar el estado queremos crear un array nuevo\n        setNotes(notes.concat(noteToAddToState))\n        setNewNote(\"\") //para limpiar el input\n    }\n    const handleShowAll = () =>{\n        setShowAll(() => !showAll)\n    }\n\n    return ( \n        <div>\n            <button onClick={handleShowAll}>{showAll ? \"Show only important\" : \"Show all\"}</button>\n            <ol>\n                {notes\n                .filter(note => {\n                    if(showAll === true) return true\n                    return note.important === true\n                })\n                .map((note) =>\n                 <Note key={note.id} {...note}/>\n                 )}\n            </ol>\n            <form onSubmit={handleSubmit}>\n                <input type='text' onChange={handleChange} value={newNote}></input>\n                <button>Crear nota</button>\n            </form>\n        </div>\n    )\n}\n"],"mappings":";;AAAA,SAAQA,IAAI,QAAO,QAAQ;AAC3B,SAAQC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAA;AAEzB,eAAe,SAASC,GAAG,CAACC,KAAK,EAAE;EAAA;EAE/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAACG,KAAK,CAACC,KAAK,CAAC;EAC/C,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IAAE;IACda,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrBF,UAAU,CAAC,IAAI,CAAC;IACZ;IACA;IACA;IACA;IACA;IACJV,KAAK,CAACa,GAAG,CAAC,4CAA4C,CAAC,CACtDC,IAAI,CAAEC,QAAQ,IAAK;MAChB,MAAM;QAACC;MAAI,CAAC,GAAGD,QAAQ;MACvBX,QAAQ,CAACY,IAAI,CAAC;MACdN,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN,MAAMO,YAAY,GAAIC,KAAK,IAAI;IAC3BZ,UAAU,CAACY,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,MAAMC,YAAY,GAAIH,KAAK,IAAI;IAC3BA,KAAK,CAACI,cAAc,EAAE,EAAC;IACvBX,OAAO,CAACC,GAAG,CAACP,OAAO,CAAC;IACpB,MAAMkB,gBAAgB,GAAG;MACrBC,EAAE,EAAErB,KAAK,CAACsB,MAAM,GAAG,CAAC;MACpBC,OAAO,EAAErB,OAAO;MAChBsB,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MAC9BC,SAAS,EAAEC,IAAI,CAACC,MAAM,EAAE,GAAG;IAC/B,CAAC;IACD;IACA5B,QAAQ,CAACD,KAAK,CAAC8B,MAAM,CAACV,gBAAgB,CAAC,CAAC;IACxCjB,UAAU,CAAC,EAAE,CAAC,EAAC;EACnB,CAAC;;EACD,MAAM4B,aAAa,GAAG,MAAK;IACvB1B,UAAU,CAAC,MAAM,CAACD,OAAO,CAAC;EAC9B,CAAC;EAED,oBACI;IAAA,wBACI;MAAQ,OAAO,EAAE2B,aAAc;MAAA,UAAE3B,OAAO,GAAG,qBAAqB,GAAG;IAAU;MAAA;MAAA;MAAA;IAAA,QAAU,eACvF;MAAA,UACKJ,KAAK,CACLgC,MAAM,CAACC,IAAI,IAAI;QACZ,IAAG7B,OAAO,KAAK,IAAI,EAAE,OAAO,IAAI;QAChC,OAAO6B,IAAI,CAACN,SAAS,KAAK,IAAI;MAClC,CAAC,CAAC,CACDO,GAAG,CAAED,IAAI,iBACT,QAAC,IAAI;QAAA,GAAmBA;MAAI,GAAjBA,IAAI,CAACZ,EAAE;QAAA;QAAA;QAAA;MAAA,QAAa;IAC9B;MAAA;MAAA;MAAA;IAAA,QACD,eACL;MAAM,QAAQ,EAAEH,YAAa;MAAA,wBACzB;QAAO,IAAI,EAAC,MAAM;QAAC,QAAQ,EAAEJ,YAAa;QAAC,KAAK,EAAEZ;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAS,eACnE;QAAA,UAAQ;MAAU;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACxB;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEd;AAAC,GA/DuBJ,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}