{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp\\\\www\\\\projecteFullStack\\\\part1\\\\part1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Note } from './Note';\nimport { useEffect, useState } from 'react';\nimport { getAllNotes } from './notes/getAllnotes';\nimport { createNote } from './notes/createNote';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App(props) {\n  _s();\n  const [notes, setNotes] = useState(props.notes);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  useEffect(() => {\n    //una request  \n    getAllNotes().then(notes => setNotes(notes));\n  }, []); //el array es de dependencias, si no se le pasa nada se ejecuta solo una vez y si le pasamos algo se ejecuta cada vez que cambie ese valor\n\n  const handleChange = event => {\n    setNewNote(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); // para evitar que se refresque la pagina\n    console.log(newNote);\n    const noteToAddToState = {\n      title: newNote,\n      body: newNote,\n      userId: 1\n    };\n    createNote(noteToAddToState).then(newNote => {\n      setNotes(prevNotes => prevNotes.concat(newNote));\n    });\n\n    //cada vez que queremos actualizar el estado queremos crear un array nuevo\n    setNewNote(\"\"); //para limpiar el input\n  };\n\n  // const handleShowAll = () =>{\n  //     setShowAll(() => !showAll)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", \" \", /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [\" \", notes\n      // .filter(note => {\n      //     if(showAll === true) return true\n      //     return note.important === true\n      // })\n      .map(note => /*#__PURE__*/_jsxDEV(Note, {\n        ...note\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 113\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleChange,\n        value: newNote,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" Crear nota \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 41\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 14\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 14\n  }, this);\n}\n_s(App, \"49Aus1r00+IefGRfjZNKXgmAsMg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Note","useEffect","useState","getAllNotes","createNote","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","then","handleChange","event","target","value","handleSubmit","preventDefault","console","log","noteToAddToState","title","body","userId","prevNotes","concat","map","note","id"],"sources":["C:/wamp/www/projecteFullStack/part1/part1/src/App.js"],"sourcesContent":["import { Note } from './Note'\nimport { useEffect, useState } from 'react'\nimport { getAllNotes } from './notes/getAllnotes'\nimport { createNote } from './notes/createNote'\n\nexport default function App(props) {\n\n    const [notes, setNotes] = useState(props.notes)\n    const [newNote, setNewNote] = useState(\"\")\n    const [showAll, setShowAll] = useState(true)\n\n    useEffect(() => { //una request  \n            getAllNotes().then((notes) => setNotes(notes))\n        }, []) //el array es de dependencias, si no se le pasa nada se ejecuta solo una vez y si le pasamos algo se ejecuta cada vez que cambie ese valor\n\n    const handleChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault() // para evitar que se refresque la pagina\n        console.log(newNote)\n        const noteToAddToState = {\n\n            title: newNote,\n            body: newNote,\n            userId: 1\n        }\n        createNote(noteToAddToState).then(newNote => {\n            setNotes((prevNotes) => prevNotes.concat(newNote))\n        })\n\n        //cada vez que queremos actualizar el estado queremos crear un array nuevo\n        setNewNote(\"\") //para limpiar el input\n    }\n\n    // const handleShowAll = () =>{\n    //     setShowAll(() => !showAll)\n    // }\n\n    return ( <\n        div > { /* <button onClick={handleShowAll}>{showAll ? \"Show only important\" : \"Show all\"}</button> */ } <\n        ol > {\n            notes\n            // .filter(note => {\n            //     if(showAll === true) return true\n            //     return note.important === true\n            // })\n            .map((note) =>\n                <\n                Note key = { note.id } {...note }\n                />\n            )\n        } <\n        /ol> <\n        form onSubmit = { handleSubmit } >\n        <\n        input type = 'text'\n        onChange = { handleChange }\n        value = { newNote } > < /input> <\n        button > Crear nota < /button> <\n        /form> <\n        /div>\n    )\n}"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,UAAU,QAAQ,oBAAoB;AAAA;AAE/C,eAAe,SAASC,GAAG,CAACC,KAAK,EAAE;EAAA;EAE/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAACI,KAAK,CAACC,KAAK,CAAC;EAC/C,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IAAE;IACVE,WAAW,EAAE,CAACU,IAAI,CAAEN,KAAK,IAAKC,QAAQ,CAACD,KAAK,CAAC,CAAC;EAClD,CAAC,EAAE,EAAE,CAAC,EAAC;;EAEX,MAAMO,YAAY,GAAIC,KAAK,IAAK;IAC5BL,UAAU,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,MAAMC,YAAY,GAAIH,KAAK,IAAK;IAC5BA,KAAK,CAACI,cAAc,EAAE,EAAC;IACvBC,OAAO,CAACC,GAAG,CAACZ,OAAO,CAAC;IACpB,MAAMa,gBAAgB,GAAG;MAErBC,KAAK,EAAEd,OAAO;MACde,IAAI,EAAEf,OAAO;MACbgB,MAAM,EAAE;IACZ,CAAC;IACDrB,UAAU,CAACkB,gBAAgB,CAAC,CAACT,IAAI,CAACJ,OAAO,IAAI;MACzCD,QAAQ,CAAEkB,SAAS,IAAKA,SAAS,CAACC,MAAM,CAAClB,OAAO,CAAC,CAAC;IACtD,CAAC,CAAC;;IAEF;IACAC,UAAU,CAAC,EAAE,CAAC,EAAC;EACnB,CAAC;;EAED;EACA;EACA;;EAEA,oBAAS;IAAA,WACA,GAAC,EAAiG,GAAC;MAAA,WACpG,GAAC,EACDH;MACA;MACA;MACA;MACA;MAAA,CACCqB,GAAG,CAAEC,IAAI,iBACN,QACA,IAAI;QAAA,GAAuBA;MAAI,GAAlBA,IAAI,CAACC,EAAE;QAAA;QAAA;QAAA;MAAA,QAClB,CACL,EACJ,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACE,KAAC;MACA,QAAQ,EAAKZ,YAAc;MAAA,wBAChC;QACM,IAAI,EAAG,MAAM;QACnB,QAAQ,EAAKJ,YAAc;QAC3B,KAAK,EAAKL,OAAS;QAAA,UAAE;MAAC;QAAA;QAAA;QAAA;MAAA,QAAS,KAAC;QAAA,UACxB;MAAY;QAAA;QAAA;QAAA;MAAA,QAAU,KAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACzB,KAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEb;AAAC,GA3DuBJ,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}